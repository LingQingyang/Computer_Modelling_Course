# -*- coding: utf-8 -*-
"""Shuttlecock Flight Test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aYh2Ez2gWIh0gK_L1TsYVdxKT1AQt8lp
"""

import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.nn.functional as F
device=torch.device("cuda"if torch.cuda.is_available()else"cpu")

class Shuttle_Flight(nn.Module):
  def __init__(self, hidden_dim=600, output_timesteps=200):
    super().__init__()
    self.output_dim=output_timesteps*3
    self.model=nn.Sequential(
        nn.Linear(4, hidden_dim),
        nn.GELU(),
        nn.Linear(hidden_dim, hidden_dim),
        nn.LeakyReLU(0.1),
        nn.Linear(hidden_dim, hidden_dim),
        nn.GELU(),
        nn.Linear(hidden_dim, hidden_dim),
        nn.LeakyReLU(0.1),
        nn.Linear(hidden_dim, hidden_dim),
        nn.GELU(),
        nn.Linear(hidden_dim, self.output_dim)
    )

  def forward(self, x):
    out = self.model(x)  # shape: (batch_size, 600)
    return out.view(-1, 200, 3)  # shape: (batch_size, 200, 3)

Badminton_model = Shuttle_Flight().to(device)
from google.colab import drive
drive.mount('/content/drive')
Badminton_model.load_state_dict(torch.load("/content/drive/MyDrive/AI_Models/shuttle_flight_model.pth"))

v0=float(input("初速度(km/h)"))
height=float(input("击球点高度(m)"))
angle=float(input("击球仰角（往上为正，往下为负）(degree)"))
x_init=float(input("击球位置（击球点到底线的距离）(m)"))

with torch.no_grad():
  input_vec = torch.tensor([[v0, height, angle, x_init]], dtype=torch.float32).to(device)
  pred = Badminton_model(input_vec).squeeze(0).cpu().numpy()
  X_preds = pred[:, 0]
  Y_preds = pred[:, 1]
  T_preds = pred[:, 2]

def Predicted_Trajectory():
  fig,ax=plt.subplots()
  ax.set_title("Flight of Shuttlecock (Predicted)")
  ax.set_xlabel("Horizontal Displacement/m")
  ax.set_ylabel("Height/m")
  ax.set_xlim(0, 13.4)
  ax.set_ylim(0, 10)

  time_since_last_label=0
  for i in range(len(T_preds)):
    if T_preds[i]-time_since_last_label>=0.2:
      ax.text(X_preds[i], Y_preds[i], f"{T_preds[i]:.2f}s", fontsize=8, color="blue")
      time_since_last_label=T_preds[i]

  ax.vlines(x=6.7, ymin=0, ymax=1.55, color='purple')
  ax.text(6.7 + 0.1, 1.55, "Net", fontsize=8, color='purple')
  ax.plot(X_preds,Y_preds,label="Trajectory")
  ax.plot(X_preds[-1], Y_preds[-1], marker='x', color='black')
  ax.text(X_preds[-1]-0.5,Y_preds[-1]+0.3, f"Lands at{T_preds[-1]:.2f}s", fontsize=6, color='black')
  ax.legend()
  plt.show()

Predicted_Trajectory()

#Modelling the Trajectory of a Shuttlecock
class Shuttlecock:
  def __init__(self,v0,height,angle,x_init,k=0.65,g=9.81):
    self.k,self.g=k,g
    self.t=0

    angle_rad=np.radians(angle)
    #The initial speed of the shuttlecock is inputed as km/h
    #A shuttlecock looses about half of the initial velocity,
    #imparted to it by the racket by the time it completes its turnaround.
    self.vx=v0*np.cos(angle_rad)/3.6/2
    self.vy=v0*np.sin(angle_rad)/3.6/2
    self.x,self.y=x_init,height

  def step(self,dt):
    ax=-self.k*self.vx
    ay=-self.g-self.k*self.vy

    self.vx+=ax*dt
    self.vy+=ay*dt

    self.x+=self.vx*dt
    self.y+=self.vy*dt
    self.t+=dt

  def flight_data(self,dt=0.01):
    X,Y,T=[self.x],[self.y],[self.t]
    while True:
      if self.y>=0:
        self.step(dt)
        X.append(self.x)
        Y.append(self.y)
        T.append(self.t)
      else:
        break
    return np.array(X), np.array(Y), np.array(T)

  def visualise(self,dt=0.01,label_interval=0.2):
    X,Y,T=self.flight_data()
    fig,ax=plt.subplots()
    ax.set_title("Flight of Shuttlecock (Reality)")
    ax.set_xlabel("Horizontal Displacement/m")
    ax.set_ylabel("Height/m")
    ax.set_xlim(0, 13.4)
    ax.set_ylim(0, 10)

    time_since_last_label=0
    for i in range(len(T)):
      if T[i]-time_since_last_label>=label_interval:
        ax.text(X[i], Y[i], f"{T[i]:.2f}s", fontsize=8, color="blue")
        time_since_last_label=T[i]

    ax.vlines(x=6.7, ymin=0, ymax=1.55, color='purple')
    ax.text(6.7 + 0.1, 1.55, "Net", fontsize=8, color='purple')
    ax.plot(X,Y,label="Trajectory")
    ax.plot(X[-1], Y[-1], marker='x', color='black')
    ax.text(X[-1]-0.5,Y[-1]+0.3, f"Lands at{self.t:.2f}s", fontsize=6, color='black')
    ax.legend()
    plt.show()

shuttle=Shuttlecock(v0=v0,height=height,angle=angle,x_init=x_init)
shuttle.visualise()